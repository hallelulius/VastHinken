# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Note(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'str',
        'severity': 'str',
        'key': 'str'
    }

    attribute_map = {
        'priority': 'priority',
        'severity': 'severity',
        'key': 'key'
    }

    def __init__(self, priority=None, severity=None, key=None):
        """
        Note - a model defined in Swagger
        """

        self._priority = None
        self._severity = None
        self._key = None

        self.priority = priority
        self.severity = severity
        if key is not None:
          self.key = key

    @property
    def priority(self):
        """
        Gets the priority of this Note.
        Priority of the note which can be used to order the notes in the list.

        :return: The priority of this Note.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this Note.
        Priority of the note which can be used to order the notes in the list.

        :param priority: The priority of this Note.
        :type: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def severity(self):
        """
        Gets the severity of this Note.
        Severity of this note, can be high, normal or low

        :return: The severity of this Note.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this Note.
        Severity of this note, can be high, normal or low

        :param severity: The severity of this Note.
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")
        allowed_values = ["high", "normal", "low"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def key(self):
        """
        Gets the key of this Note.
        Type of this note

        :return: The key of this Note.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Note.
        Type of this note

        :param key: The key of this Note.
        :type: str
        """

        self._key = key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Note):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
