# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Departure(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fg_color': 'str',
        'stop': 'str',
        'booking': 'bool',
        'direction': 'str',
        'journey_detail_ref': 'JourneyDetailRef',
        'track': 'str',
        'rt_track': 'str',
        'sname': 'str',
        'type': 'str',
        'date': 'date',
        'bg_color': 'str',
        'stroke': 'str',
        'rt_date': 'date',
        'time': 'str',
        'name': 'str',
        'rt_time': 'str',
        'night': 'bool',
        'stopid': 'str',
        'journeyid': 'str',
        'accessibility': 'str'
    }

    attribute_map = {
        'fg_color': 'fgColor',
        'stop': 'stop',
        'booking': 'booking',
        'direction': 'direction',
        'journey_detail_ref': 'JourneyDetailRef',
        'track': 'track',
        'rt_track': 'rtTrack',
        'sname': 'sname',
        'type': 'type',
        'date': 'date',
        'bg_color': 'bgColor',
        'stroke': 'stroke',
        'rt_date': 'rtDate',
        'time': 'time',
        'name': 'name',
        'rt_time': 'rtTime',
        'night': 'night',
        'stopid': 'stopid',
        'journeyid': 'journeyid',
        'accessibility': 'accessibility'
    }

    def __init__(self, fg_color=None, stop=None, booking=None, direction=None, journey_detail_ref=None, track=None, rt_track=None, sname=None, type=None, date=None, bg_color=None, stroke=None, rt_date=None, time=None, name=None, rt_time=None, night=None, stopid=None, journeyid=None, accessibility=None):
        """
        Departure - a model defined in Swagger
        """

        self._fg_color = None
        self._stop = None
        self._booking = None
        self._direction = None
        self._journey_detail_ref = None
        self._track = None
        self._rt_track = None
        self._sname = None
        self._type = None
        self._date = None
        self._bg_color = None
        self._stroke = None
        self._rt_date = None
        self._time = None
        self._name = None
        self._rt_time = None
        self._night = None
        self._stopid = None
        self._journeyid = None
        self._accessibility = None

        self.fg_color = fg_color
        self.stop = stop
        if booking is not None:
          self.booking = booking
        self.direction = direction
        self.journey_detail_ref = journey_detail_ref
        self.track = track
        if rt_track is not None:
          self.rt_track = rt_track
        self.sname = sname
        self.type = type
        self.date = date
        self.bg_color = bg_color
        self.stroke = stroke
        self.rt_date = rt_date
        self.time = time
        self.name = name
        self.rt_time = rt_time
        if night is not None:
          self.night = night
        self.stopid = stopid
        self.journeyid = journeyid
        self.accessibility = accessibility

    @property
    def fg_color(self):
        """
        Gets the fg_color of this Departure.
        Foregroundcolor of this line

        :return: The fg_color of this Departure.
        :rtype: str
        """
        return self._fg_color

    @fg_color.setter
    def fg_color(self, fg_color):
        """
        Sets the fg_color of this Departure.
        Foregroundcolor of this line

        :param fg_color: The fg_color of this Departure.
        :type: str
        """
        if fg_color is None:
            raise ValueError("Invalid value for `fg_color`, must not be `None`")

        self._fg_color = fg_color

    @property
    def stop(self):
        """
        Gets the stop of this Departure.
        Contains the name of the stop/station

        :return: The stop of this Departure.
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this Departure.
        Contains the name of the stop/station

        :param stop: The stop of this Departure.
        :type: str
        """
        if stop is None:
            raise ValueError("Invalid value for `stop`, must not be `None`")

        self._stop = stop

    @property
    def booking(self):
        """
        Gets the booking of this Departure.
        Will be true if this journey needs to be booked

        :return: The booking of this Departure.
        :rtype: bool
        """
        return self._booking

    @booking.setter
    def booking(self, booking):
        """
        Sets the booking of this Departure.
        Will be true if this journey needs to be booked

        :param booking: The booking of this Departure.
        :type: bool
        """

        self._booking = booking

    @property
    def direction(self):
        """
        Gets the direction of this Departure.
        Direction information

        :return: The direction of this Departure.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this Departure.
        Direction information

        :param direction: The direction of this Departure.
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def journey_detail_ref(self):
        """
        Gets the journey_detail_ref of this Departure.

        :return: The journey_detail_ref of this Departure.
        :rtype: JourneyDetailRef
        """
        return self._journey_detail_ref

    @journey_detail_ref.setter
    def journey_detail_ref(self, journey_detail_ref):
        """
        Sets the journey_detail_ref of this Departure.

        :param journey_detail_ref: The journey_detail_ref of this Departure.
        :type: JourneyDetailRef
        """
        if journey_detail_ref is None:
            raise ValueError("Invalid value for `journey_detail_ref`, must not be `None`")

        self._journey_detail_ref = journey_detail_ref

    @property
    def track(self):
        """
        Gets the track of this Departure.
        Track information, if available

        :return: The track of this Departure.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """
        Sets the track of this Departure.
        Track information, if available

        :param track: The track of this Departure.
        :type: str
        """
        if track is None:
            raise ValueError("Invalid value for `track`, must not be `None`")

        self._track = track

    @property
    def rt_track(self):
        """
        Gets the rt_track of this Departure.
        Realtime track information, if available

        :return: The rt_track of this Departure.
        :rtype: str
        """
        return self._rt_track

    @rt_track.setter
    def rt_track(self, rt_track):
        """
        Sets the rt_track of this Departure.
        Realtime track information, if available

        :param rt_track: The rt_track of this Departure.
        :type: str
        """

        self._rt_track = rt_track

    @property
    def sname(self):
        """
        Gets the sname of this Departure.
        Short name of the leg

        :return: The sname of this Departure.
        :rtype: str
        """
        return self._sname

    @sname.setter
    def sname(self, sname):
        """
        Sets the sname of this Departure.
        Short name of the leg

        :param sname: The sname of this Departure.
        :type: str
        """
        if sname is None:
            raise ValueError("Invalid value for `sname`, must not be `None`")

        self._sname = sname

    @property
    def type(self):
        """
        Gets the type of this Departure.
        The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)

        :return: The type of this Departure.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Departure.
        The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)

        :param type: The type of this Departure.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def date(self):
        """
        Gets the date of this Departure.
        Date in format YYYY-MM-DD

        :return: The date of this Departure.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this Departure.
        Date in format YYYY-MM-DD

        :param date: The date of this Departure.
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def bg_color(self):
        """
        Gets the bg_color of this Departure.
        Backgroundcolor of this line

        :return: The bg_color of this Departure.
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """
        Sets the bg_color of this Departure.
        Backgroundcolor of this line

        :param bg_color: The bg_color of this Departure.
        :type: str
        """
        if bg_color is None:
            raise ValueError("Invalid value for `bg_color`, must not be `None`")

        self._bg_color = bg_color

    @property
    def stroke(self):
        """
        Gets the stroke of this Departure.
        Stroke style of this line

        :return: The stroke of this Departure.
        :rtype: str
        """
        return self._stroke

    @stroke.setter
    def stroke(self, stroke):
        """
        Sets the stroke of this Departure.
        Stroke style of this line

        :param stroke: The stroke of this Departure.
        :type: str
        """
        if stroke is None:
            raise ValueError("Invalid value for `stroke`, must not be `None`")

        self._stroke = stroke

    @property
    def rt_date(self):
        """
        Gets the rt_date of this Departure.
        Realtime date in format YYYY-MM-DD, if available

        :return: The rt_date of this Departure.
        :rtype: date
        """
        return self._rt_date

    @rt_date.setter
    def rt_date(self, rt_date):
        """
        Sets the rt_date of this Departure.
        Realtime date in format YYYY-MM-DD, if available

        :param rt_date: The rt_date of this Departure.
        :type: date
        """
        if rt_date is None:
            raise ValueError("Invalid value for `rt_date`, must not be `None`")

        self._rt_date = rt_date

    @property
    def time(self):
        """
        Gets the time of this Departure.
        Time in format HH:MM

        :return: The time of this Departure.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this Departure.
        Time in format HH:MM

        :param time: The time of this Departure.
        :type: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def name(self):
        """
        Gets the name of this Departure.
        The attribute name specifies the name of the departing journey

        :return: The name of this Departure.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Departure.
        The attribute name specifies the name of the departing journey

        :param name: The name of this Departure.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rt_time(self):
        """
        Gets the rt_time of this Departure.
        Realtime time in format HH:MM if available

        :return: The rt_time of this Departure.
        :rtype: str
        """
        return self._rt_time

    @rt_time.setter
    def rt_time(self, rt_time):
        """
        Sets the rt_time of this Departure.
        Realtime time in format HH:MM if available

        :param rt_time: The rt_time of this Departure.
        :type: str
        """
        if rt_time is None:
            raise ValueError("Invalid value for `rt_time`, must not be `None`")

        self._rt_time = rt_time

    @property
    def night(self):
        """
        Gets the night of this Departure.
        Will be true if this journey is a night journey

        :return: The night of this Departure.
        :rtype: bool
        """
        return self._night

    @night.setter
    def night(self, night):
        """
        Sets the night of this Departure.
        Will be true if this journey is a night journey

        :param night: The night of this Departure.
        :type: bool
        """

        self._night = night

    @property
    def stopid(self):
        """
        Gets the stopid of this Departure.
        Contains the id of the stop/station

        :return: The stopid of this Departure.
        :rtype: str
        """
        return self._stopid

    @stopid.setter
    def stopid(self, stopid):
        """
        Sets the stopid of this Departure.
        Contains the id of the stop/station

        :param stopid: The stopid of this Departure.
        :type: str
        """
        if stopid is None:
            raise ValueError("Invalid value for `stopid`, must not be `None`")

        self._stopid = stopid

    @property
    def journeyid(self):
        """
        Gets the journeyid of this Departure.
        Contains the id of the journey

        :return: The journeyid of this Departure.
        :rtype: str
        """
        return self._journeyid

    @journeyid.setter
    def journeyid(self, journeyid):
        """
        Sets the journeyid of this Departure.
        Contains the id of the journey

        :param journeyid: The journeyid of this Departure.
        :type: str
        """
        if journeyid is None:
            raise ValueError("Invalid value for `journeyid`, must not be `None`")

        self._journeyid = journeyid

    @property
    def accessibility(self):
        """
        Gets the accessibility of this Departure.
        will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data

        :return: The accessibility of this Departure.
        :rtype: str
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """
        Sets the accessibility of this Departure.
        will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data

        :param accessibility: The accessibility of this Departure.
        :type: str
        """
        if accessibility is None:
            raise ValueError("Invalid value for `accessibility`, must not be `None`")
        allowed_values = ["wheelChair", "lowFloor"]
        if accessibility not in allowed_values:
            raise ValueError(
                "Invalid value for `accessibility` ({0}), must be one of {1}"
                .format(accessibility, allowed_values)
            )

        self._accessibility = accessibility

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Departure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
