# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JourneyName(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_idx_to': 'int',
        'route_idx_from': 'int',
        'name': 'str'
    }

    attribute_map = {
        'route_idx_to': 'routeIdxTo',
        'route_idx_from': 'routeIdxFrom',
        'name': 'name'
    }

    def __init__(self, route_idx_to=None, route_idx_from=None, name=None):
        """
        JourneyName - a model defined in Swagger
        """

        self._route_idx_to = None
        self._route_idx_from = None
        self._name = None

        self.route_idx_to = route_idx_to
        self.route_idx_from = route_idx_from
        self.name = name

    @property
    def route_idx_to(self):
        """
        Gets the route_idx_to of this JourneyName.
        End of validity on total route.

        :return: The route_idx_to of this JourneyName.
        :rtype: int
        """
        return self._route_idx_to

    @route_idx_to.setter
    def route_idx_to(self, route_idx_to):
        """
        Sets the route_idx_to of this JourneyName.
        End of validity on total route.

        :param route_idx_to: The route_idx_to of this JourneyName.
        :type: int
        """
        if route_idx_to is None:
            raise ValueError("Invalid value for `route_idx_to`, must not be `None`")

        self._route_idx_to = route_idx_to

    @property
    def route_idx_from(self):
        """
        Gets the route_idx_from of this JourneyName.
        Start of validity on total route

        :return: The route_idx_from of this JourneyName.
        :rtype: int
        """
        return self._route_idx_from

    @route_idx_from.setter
    def route_idx_from(self, route_idx_from):
        """
        Sets the route_idx_from of this JourneyName.
        Start of validity on total route

        :param route_idx_from: The route_idx_from of this JourneyName.
        :type: int
        """
        if route_idx_from is None:
            raise ValueError("Invalid value for `route_idx_from`, must not be `None`")

        self._route_idx_from = route_idx_from

    @property
    def name(self):
        """
        Gets the name of this JourneyName.
        Name to be displayed

        :return: The name of this JourneyName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this JourneyName.
        Name to be displayed

        :param name: The name of this JourneyName.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JourneyName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
