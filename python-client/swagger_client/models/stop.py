# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Stop(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_idx': 'str',
        'arr_date': 'date',
        'dep_time': 'str',
        'lon': 'str',
        'dep_date': 'date',
        'track': 'str',
        'rt_track': 'str',
        'id': 'str',
        'rt_dep_time': 'str',
        'rt_arr_time': 'str',
        'name': 'str',
        'arr_time': 'str',
        'lat': 'str',
        'rt_dep_date': 'date',
        'rt_arr_date': 'date'
    }

    attribute_map = {
        'route_idx': 'routeIdx',
        'arr_date': 'arrDate',
        'dep_time': 'depTime',
        'lon': 'lon',
        'dep_date': 'depDate',
        'track': 'track',
        'rt_track': 'rtTrack',
        'id': 'id',
        'rt_dep_time': 'rtDepTime',
        'rt_arr_time': 'rtArrTime',
        'name': 'name',
        'arr_time': 'arrTime',
        'lat': 'lat',
        'rt_dep_date': 'rtDepDate',
        'rt_arr_date': 'rtArrDate'
    }

    def __init__(self, route_idx=None, arr_date=None, dep_time=None, lon=None, dep_date=None, track=None, rt_track=None, id=None, rt_dep_time=None, rt_arr_time=None, name=None, arr_time=None, lat=None, rt_dep_date=None, rt_arr_date=None):
        """
        Stop - a model defined in Swagger
        """

        self._route_idx = None
        self._arr_date = None
        self._dep_time = None
        self._lon = None
        self._dep_date = None
        self._track = None
        self._rt_track = None
        self._id = None
        self._rt_dep_time = None
        self._rt_arr_time = None
        self._name = None
        self._arr_time = None
        self._lat = None
        self._rt_dep_date = None
        self._rt_arr_date = None

        self.route_idx = route_idx
        if arr_date is not None:
          self.arr_date = arr_date
        if dep_time is not None:
          self.dep_time = dep_time
        self.lon = lon
        if dep_date is not None:
          self.dep_date = dep_date
        self.track = track
        if rt_track is not None:
          self.rt_track = rt_track
        self.id = id
        if rt_dep_time is not None:
          self.rt_dep_time = rt_dep_time
        if rt_arr_time is not None:
          self.rt_arr_time = rt_arr_time
        self.name = name
        if arr_time is not None:
          self.arr_time = arr_time
        self.lat = lat
        if rt_dep_date is not None:
          self.rt_dep_date = rt_dep_date
        if rt_arr_date is not None:
          self.rt_arr_date = rt_arr_date

    @property
    def route_idx(self):
        """
        Gets the route_idx of this Stop.
        Route index of a stop/station. Can be used as a reference of the stop/station in a journeyDetail response

        :return: The route_idx of this Stop.
        :rtype: str
        """
        return self._route_idx

    @route_idx.setter
    def route_idx(self, route_idx):
        """
        Sets the route_idx of this Stop.
        Route index of a stop/station. Can be used as a reference of the stop/station in a journeyDetail response

        :param route_idx: The route_idx of this Stop.
        :type: str
        """
        if route_idx is None:
            raise ValueError("Invalid value for `route_idx`, must not be `None`")

        self._route_idx = route_idx

    @property
    def arr_date(self):
        """
        Gets the arr_date of this Stop.
        Arrival date in format YYYY-MM-DD, if available

        :return: The arr_date of this Stop.
        :rtype: date
        """
        return self._arr_date

    @arr_date.setter
    def arr_date(self, arr_date):
        """
        Sets the arr_date of this Stop.
        Arrival date in format YYYY-MM-DD, if available

        :param arr_date: The arr_date of this Stop.
        :type: date
        """

        self._arr_date = arr_date

    @property
    def dep_time(self):
        """
        Gets the dep_time of this Stop.
        Departure time in format HH:MM, if available

        :return: The dep_time of this Stop.
        :rtype: str
        """
        return self._dep_time

    @dep_time.setter
    def dep_time(self, dep_time):
        """
        Sets the dep_time of this Stop.
        Departure time in format HH:MM, if available

        :param dep_time: The dep_time of this Stop.
        :type: str
        """

        self._dep_time = dep_time

    @property
    def lon(self):
        """
        Gets the lon of this Stop.
        The WGS84 longitude

        :return: The lon of this Stop.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """
        Sets the lon of this Stop.
        The WGS84 longitude

        :param lon: The lon of this Stop.
        :type: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def dep_date(self):
        """
        Gets the dep_date of this Stop.
        Departure date in format YYYY-MM-DD, if available

        :return: The dep_date of this Stop.
        :rtype: date
        """
        return self._dep_date

    @dep_date.setter
    def dep_date(self, dep_date):
        """
        Sets the dep_date of this Stop.
        Departure date in format YYYY-MM-DD, if available

        :param dep_date: The dep_date of this Stop.
        :type: date
        """

        self._dep_date = dep_date

    @property
    def track(self):
        """
        Gets the track of this Stop.
        Track information, if available

        :return: The track of this Stop.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """
        Sets the track of this Stop.
        Track information, if available

        :param track: The track of this Stop.
        :type: str
        """
        if track is None:
            raise ValueError("Invalid value for `track`, must not be `None`")

        self._track = track

    @property
    def rt_track(self):
        """
        Gets the rt_track of this Stop.
        Realtime track information, if available

        :return: The rt_track of this Stop.
        :rtype: str
        """
        return self._rt_track

    @rt_track.setter
    def rt_track(self, rt_track):
        """
        Sets the rt_track of this Stop.
        Realtime track information, if available

        :param rt_track: The rt_track of this Stop.
        :type: str
        """

        self._rt_track = rt_track

    @property
    def id(self):
        """
        Gets the id of this Stop.

        :return: The id of this Stop.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Stop.

        :param id: The id of this Stop.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def rt_dep_time(self):
        """
        Gets the rt_dep_time of this Stop.
        Realtime departure time in format HH:MM if available

        :return: The rt_dep_time of this Stop.
        :rtype: str
        """
        return self._rt_dep_time

    @rt_dep_time.setter
    def rt_dep_time(self, rt_dep_time):
        """
        Sets the rt_dep_time of this Stop.
        Realtime departure time in format HH:MM if available

        :param rt_dep_time: The rt_dep_time of this Stop.
        :type: str
        """

        self._rt_dep_time = rt_dep_time

    @property
    def rt_arr_time(self):
        """
        Gets the rt_arr_time of this Stop.
        Realtime arrival time in format HH:MM if available

        :return: The rt_arr_time of this Stop.
        :rtype: str
        """
        return self._rt_arr_time

    @rt_arr_time.setter
    def rt_arr_time(self, rt_arr_time):
        """
        Sets the rt_arr_time of this Stop.
        Realtime arrival time in format HH:MM if available

        :param rt_arr_time: The rt_arr_time of this Stop.
        :type: str
        """

        self._rt_arr_time = rt_arr_time

    @property
    def name(self):
        """
        Gets the name of this Stop.
        Contains the name of the stop/station

        :return: The name of this Stop.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Stop.
        Contains the name of the stop/station

        :param name: The name of this Stop.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def arr_time(self):
        """
        Gets the arr_time of this Stop.
        Arrival time in format HH:MM, if available

        :return: The arr_time of this Stop.
        :rtype: str
        """
        return self._arr_time

    @arr_time.setter
    def arr_time(self, arr_time):
        """
        Sets the arr_time of this Stop.
        Arrival time in format HH:MM, if available

        :param arr_time: The arr_time of this Stop.
        :type: str
        """

        self._arr_time = arr_time

    @property
    def lat(self):
        """
        Gets the lat of this Stop.
        The WGS84 latitude

        :return: The lat of this Stop.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """
        Sets the lat of this Stop.
        The WGS84 latitude

        :param lat: The lat of this Stop.
        :type: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def rt_dep_date(self):
        """
        Gets the rt_dep_date of this Stop.
        Realtime departure date in format YYYY-MM-DD, if available

        :return: The rt_dep_date of this Stop.
        :rtype: date
        """
        return self._rt_dep_date

    @rt_dep_date.setter
    def rt_dep_date(self, rt_dep_date):
        """
        Sets the rt_dep_date of this Stop.
        Realtime departure date in format YYYY-MM-DD, if available

        :param rt_dep_date: The rt_dep_date of this Stop.
        :type: date
        """

        self._rt_dep_date = rt_dep_date

    @property
    def rt_arr_date(self):
        """
        Gets the rt_arr_date of this Stop.
        Realtime arrival date in format YYYY-MM-DD, if available

        :return: The rt_arr_date of this Stop.
        :rtype: date
        """
        return self._rt_arr_date

    @rt_arr_date.setter
    def rt_arr_date(self, rt_arr_date):
        """
        Sets the rt_arr_date of this Stop.
        Realtime arrival date in format YYYY-MM-DD, if available

        :param rt_arr_date: The rt_arr_date of this Stop.
        :type: date
        """

        self._rt_arr_date = rt_arr_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Stop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
