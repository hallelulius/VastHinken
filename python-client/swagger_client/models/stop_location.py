# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StopLocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'lon': 'str',
        'idx': 'str',
        'weight': 'str',
        'name': 'str',
        'track': 'str',
        'lat': 'str'
    }

    attribute_map = {
        'id': 'id',
        'lon': 'lon',
        'idx': 'idx',
        'weight': 'weight',
        'name': 'name',
        'track': 'track',
        'lat': 'lat'
    }

    def __init__(self, id=None, lon=None, idx=None, weight=None, name=None, track=None, lat=None):
        """
        StopLocation - a model defined in Swagger
        """

        self._id = None
        self._lon = None
        self._idx = None
        self._weight = None
        self._name = None
        self._track = None
        self._lat = None

        self.id = id
        self.lon = lon
        self.idx = idx
        if weight is not None:
          self.weight = weight
        self.name = name
        if track is not None:
          self.track = track
        self.lat = lat

    @property
    def id(self):
        """
        Gets the id of this StopLocation.
        This ID can either be used as originId or destId to perform a trip request or to call a departure  board

        :return: The id of this StopLocation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StopLocation.
        This ID can either be used as originId or destId to perform a trip request or to call a departure  board

        :param id: The id of this StopLocation.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lon(self):
        """
        Gets the lon of this StopLocation.
        The WGS84 longitude

        :return: The lon of this StopLocation.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """
        Sets the lon of this StopLocation.
        The WGS84 longitude

        :param lon: The lon of this StopLocation.
        :type: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def idx(self):
        """
        Gets the idx of this StopLocation.
        This index can be used to reorder the StopLocations and CoordLocations in JSON format response to their correct order. IN JSON you can receive two arrays, one for Stops and one for Addresses. This attribute is only contained in reponses to the location.name request. The location with idx=1 is the best fitting location

        :return: The idx of this StopLocation.
        :rtype: str
        """
        return self._idx

    @idx.setter
    def idx(self, idx):
        """
        Sets the idx of this StopLocation.
        This index can be used to reorder the StopLocations and CoordLocations in JSON format response to their correct order. IN JSON you can receive two arrays, one for Stops and one for Addresses. This attribute is only contained in reponses to the location.name request. The location with idx=1 is the best fitting location

        :param idx: The idx of this StopLocation.
        :type: str
        """
        if idx is None:
            raise ValueError("Invalid value for `idx`, must not be `None`")

        self._idx = idx

    @property
    def weight(self):
        """
        Gets the weight of this StopLocation.
        This value specifies some kind of importance of this stop. The more traffic at this stop the higher the weight. The range is between 0 and 32767. This attribute is just contained in the location.allstops response

        :return: The weight of this StopLocation.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this StopLocation.
        This value specifies some kind of importance of this stop. The more traffic at this stop the higher the weight. The range is between 0 and 32767. This attribute is just contained in the location.allstops response

        :param weight: The weight of this StopLocation.
        :type: str
        """

        self._weight = weight

    @property
    def name(self):
        """
        Gets the name of this StopLocation.
        Contains the output name of this stop or station

        :return: The name of this StopLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StopLocation.
        Contains the output name of this stop or station

        :param name: The name of this StopLocation.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def track(self):
        """
        Gets the track of this StopLocation.
        Track information, if available

        :return: The track of this StopLocation.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """
        Sets the track of this StopLocation.
        Track information, if available

        :param track: The track of this StopLocation.
        :type: str
        """

        self._track = track

    @property
    def lat(self):
        """
        Gets the lat of this StopLocation.
        The WGS84 latitude

        :return: The lat of this StopLocation.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """
        Sets the lat of this StopLocation.
        The WGS84 latitude

        :param lat: The lat of this StopLocation.
        :type: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StopLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
