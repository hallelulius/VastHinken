# coding: utf-8

"""
    Reseplaneraren

    Provides access to Västtrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Trip(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leg': 'list[Leg]',
        'travel_warranty': 'bool',
        'valid': 'bool',
        'alternative': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'leg': 'Leg',
        'travel_warranty': 'travelWarranty',
        'valid': 'valid',
        'alternative': 'alternative',
        'type': 'type'
    }

    def __init__(self, leg=None, travel_warranty=None, valid=None, alternative=None, type=None):
        """
        Trip - a model defined in Swagger
        """

        self._leg = None
        self._travel_warranty = None
        self._valid = None
        self._alternative = None
        self._type = None

        if leg is not None:
          self.leg = leg
        if travel_warranty is not None:
          self.travel_warranty = travel_warranty
        if valid is not None:
          self.valid = valid
        self.alternative = alternative
        if type is not None:
          self.type = type

    @property
    def leg(self):
        """
        Gets the leg of this Trip.

        :return: The leg of this Trip.
        :rtype: list[Leg]
        """
        return self._leg

    @leg.setter
    def leg(self, leg):
        """
        Sets the leg of this Trip.

        :param leg: The leg of this Trip.
        :type: list[Leg]
        """

        self._leg = leg

    @property
    def travel_warranty(self):
        """
        Gets the travel_warranty of this Trip.
        IMPORTANT NOTE: journeys that are presented when the default change margin has been disregarded are not covered by V�sttrafiks travel warranty (Swedish: resegaranti).

        :return: The travel_warranty of this Trip.
        :rtype: bool
        """
        return self._travel_warranty

    @travel_warranty.setter
    def travel_warranty(self, travel_warranty):
        """
        Sets the travel_warranty of this Trip.
        IMPORTANT NOTE: journeys that are presented when the default change margin has been disregarded are not covered by V�sttrafiks travel warranty (Swedish: resegaranti).

        :param travel_warranty: The travel_warranty of this Trip.
        :type: bool
        """

        self._travel_warranty = travel_warranty

    @property
    def valid(self):
        """
        Gets the valid of this Trip.
        The state indicates if the trip is still possible to ride based on the current realtime situation

        :return: The valid of this Trip.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this Trip.
        The state indicates if the trip is still possible to ride based on the current realtime situation

        :param valid: The valid of this Trip.
        :type: bool
        """

        self._valid = valid

    @property
    def alternative(self):
        """
        Gets the alternative of this Trip.
        The type indicates whether this is an original connection or an realtime alternative

        :return: The alternative of this Trip.
        :rtype: bool
        """
        return self._alternative

    @alternative.setter
    def alternative(self, alternative):
        """
        Sets the alternative of this Trip.
        The type indicates whether this is an original connection or an realtime alternative

        :param alternative: The alternative of this Trip.
        :type: bool
        """
        if alternative is None:
            raise ValueError("Invalid value for `alternative`, must not be `None`")

        self._alternative = alternative

    @property
    def type(self):
        """
        Gets the type of this Trip.
        Type of trip

        :return: The type of this Trip.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Trip.
        Type of trip

        :param type: The type of this Trip.
        :type: str
        """
        allowed_values = ["WALK", "BIKE", "CAR"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Trip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
