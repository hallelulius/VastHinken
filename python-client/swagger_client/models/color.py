# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Color(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bg_color': 'str',
        'fg_color': 'str',
        'stroke': 'str'
    }

    attribute_map = {
        'bg_color': 'bgColor',
        'fg_color': 'fgColor',
        'stroke': 'stroke'
    }

    def __init__(self, bg_color=None, fg_color=None, stroke=None):
        """
        Color - a model defined in Swagger
        """

        self._bg_color = None
        self._fg_color = None
        self._stroke = None

        self.bg_color = bg_color
        self.fg_color = fg_color
        self.stroke = stroke

    @property
    def bg_color(self):
        """
        Gets the bg_color of this Color.
        Backgroundcolor of this line

        :return: The bg_color of this Color.
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """
        Sets the bg_color of this Color.
        Backgroundcolor of this line

        :param bg_color: The bg_color of this Color.
        :type: str
        """
        if bg_color is None:
            raise ValueError("Invalid value for `bg_color`, must not be `None`")

        self._bg_color = bg_color

    @property
    def fg_color(self):
        """
        Gets the fg_color of this Color.
        Foregroundcolor of this line

        :return: The fg_color of this Color.
        :rtype: str
        """
        return self._fg_color

    @fg_color.setter
    def fg_color(self, fg_color):
        """
        Sets the fg_color of this Color.
        Foregroundcolor of this line

        :param fg_color: The fg_color of this Color.
        :type: str
        """
        if fg_color is None:
            raise ValueError("Invalid value for `fg_color`, must not be `None`")

        self._fg_color = fg_color

    @property
    def stroke(self):
        """
        Gets the stroke of this Color.
        Stroke style of this line

        :return: The stroke of this Color.
        :rtype: str
        """
        return self._stroke

    @stroke.setter
    def stroke(self, stroke):
        """
        Sets the stroke of this Color.
        Stroke style of this line

        :param stroke: The stroke of this Color.
        :type: str
        """
        if stroke is None:
            raise ValueError("Invalid value for `stroke`, must not be `None`")

        self._stroke = stroke

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Color):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
