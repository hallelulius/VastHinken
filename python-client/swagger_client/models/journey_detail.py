# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JourneyDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'journey_type': 'JourneyType',
        'error_text': 'str',
        'error': 'str',
        'serverdate': 'date',
        'servertime': 'str',
        'journey_id': 'JourneyId',
        'direction': 'Direction',
        'stop': 'list[Stop]',
        'journey_name': 'JourneyName',
        'geometry_ref': 'GeometryRef',
        'color': 'Color',
        'no_namespace_schema_location': 'str'
    }

    attribute_map = {
        'journey_type': 'JourneyType',
        'error_text': 'errorText',
        'error': 'error',
        'serverdate': 'serverdate',
        'servertime': 'servertime',
        'journey_id': 'JourneyId',
        'direction': 'Direction',
        'stop': 'Stop',
        'journey_name': 'JourneyName',
        'geometry_ref': 'GeometryRef',
        'color': 'Color',
        'no_namespace_schema_location': 'noNamespaceSchemaLocation'
    }

    def __init__(self, journey_type=None, error_text=None, error=None, serverdate=None, servertime=None, journey_id=None, direction=None, stop=None, journey_name=None, geometry_ref=None, color=None, no_namespace_schema_location=None):
        """
        JourneyDetail - a model defined in Swagger
        """

        self._journey_type = None
        self._error_text = None
        self._error = None
        self._serverdate = None
        self._servertime = None
        self._journey_id = None
        self._direction = None
        self._stop = None
        self._journey_name = None
        self._geometry_ref = None
        self._color = None
        self._no_namespace_schema_location = None

        if journey_type is not None:
          self.journey_type = journey_type
        if error_text is not None:
          self.error_text = error_text
        if error is not None:
          self.error = error
        if serverdate is not None:
          self.serverdate = serverdate
        if servertime is not None:
          self.servertime = servertime
        if journey_id is not None:
          self.journey_id = journey_id
        if direction is not None:
          self.direction = direction
        if stop is not None:
          self.stop = stop
        if journey_name is not None:
          self.journey_name = journey_name
        if geometry_ref is not None:
          self.geometry_ref = geometry_ref
        if color is not None:
          self.color = color
        self.no_namespace_schema_location = no_namespace_schema_location

    @property
    def journey_type(self):
        """
        Gets the journey_type of this JourneyDetail.

        :return: The journey_type of this JourneyDetail.
        :rtype: JourneyType
        """
        return self._journey_type

    @journey_type.setter
    def journey_type(self, journey_type):
        """
        Sets the journey_type of this JourneyDetail.

        :param journey_type: The journey_type of this JourneyDetail.
        :type: JourneyType
        """

        self._journey_type = journey_type

    @property
    def error_text(self):
        """
        Gets the error_text of this JourneyDetail.

        :return: The error_text of this JourneyDetail.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """
        Sets the error_text of this JourneyDetail.

        :param error_text: The error_text of this JourneyDetail.
        :type: str
        """

        self._error_text = error_text

    @property
    def error(self):
        """
        Gets the error of this JourneyDetail.

        :return: The error of this JourneyDetail.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this JourneyDetail.

        :param error: The error of this JourneyDetail.
        :type: str
        """

        self._error = error

    @property
    def serverdate(self):
        """
        Gets the serverdate of this JourneyDetail.

        :return: The serverdate of this JourneyDetail.
        :rtype: date
        """
        return self._serverdate

    @serverdate.setter
    def serverdate(self, serverdate):
        """
        Sets the serverdate of this JourneyDetail.

        :param serverdate: The serverdate of this JourneyDetail.
        :type: date
        """

        self._serverdate = serverdate

    @property
    def servertime(self):
        """
        Gets the servertime of this JourneyDetail.
        Current server time in format HH:MM

        :return: The servertime of this JourneyDetail.
        :rtype: str
        """
        return self._servertime

    @servertime.setter
    def servertime(self, servertime):
        """
        Sets the servertime of this JourneyDetail.
        Current server time in format HH:MM

        :param servertime: The servertime of this JourneyDetail.
        :type: str
        """

        self._servertime = servertime

    @property
    def journey_id(self):
        """
        Gets the journey_id of this JourneyDetail.

        :return: The journey_id of this JourneyDetail.
        :rtype: JourneyId
        """
        return self._journey_id

    @journey_id.setter
    def journey_id(self, journey_id):
        """
        Sets the journey_id of this JourneyDetail.

        :param journey_id: The journey_id of this JourneyDetail.
        :type: JourneyId
        """

        self._journey_id = journey_id

    @property
    def direction(self):
        """
        Gets the direction of this JourneyDetail.

        :return: The direction of this JourneyDetail.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this JourneyDetail.

        :param direction: The direction of this JourneyDetail.
        :type: Direction
        """

        self._direction = direction

    @property
    def stop(self):
        """
        Gets the stop of this JourneyDetail.

        :return: The stop of this JourneyDetail.
        :rtype: list[Stop]
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this JourneyDetail.

        :param stop: The stop of this JourneyDetail.
        :type: list[Stop]
        """

        self._stop = stop

    @property
    def journey_name(self):
        """
        Gets the journey_name of this JourneyDetail.

        :return: The journey_name of this JourneyDetail.
        :rtype: JourneyName
        """
        return self._journey_name

    @journey_name.setter
    def journey_name(self, journey_name):
        """
        Sets the journey_name of this JourneyDetail.

        :param journey_name: The journey_name of this JourneyDetail.
        :type: JourneyName
        """

        self._journey_name = journey_name

    @property
    def geometry_ref(self):
        """
        Gets the geometry_ref of this JourneyDetail.

        :return: The geometry_ref of this JourneyDetail.
        :rtype: GeometryRef
        """
        return self._geometry_ref

    @geometry_ref.setter
    def geometry_ref(self, geometry_ref):
        """
        Sets the geometry_ref of this JourneyDetail.

        :param geometry_ref: The geometry_ref of this JourneyDetail.
        :type: GeometryRef
        """

        self._geometry_ref = geometry_ref

    @property
    def color(self):
        """
        Gets the color of this JourneyDetail.

        :return: The color of this JourneyDetail.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this JourneyDetail.

        :param color: The color of this JourneyDetail.
        :type: Color
        """

        self._color = color

    @property
    def no_namespace_schema_location(self):
        """
        Gets the no_namespace_schema_location of this JourneyDetail.

        :return: The no_namespace_schema_location of this JourneyDetail.
        :rtype: str
        """
        return self._no_namespace_schema_location

    @no_namespace_schema_location.setter
    def no_namespace_schema_location(self, no_namespace_schema_location):
        """
        Sets the no_namespace_schema_location of this JourneyDetail.

        :param no_namespace_schema_location: The no_namespace_schema_location of this JourneyDetail.
        :type: str
        """
        if no_namespace_schema_location is None:
            raise ValueError("Invalid value for `no_namespace_schema_location`, must not be `None`")

        self._no_namespace_schema_location = no_namespace_schema_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JourneyDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
