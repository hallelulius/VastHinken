# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LivemapApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def livemap(self, minx, maxx, miny, maxy, only_realtime, **kwargs):
        """
        Returns the positions of all vehicles in a given bounding box
        This method will return the positions of all vehicles in a given bounding box.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.livemap(minx, maxx, miny, maxy, only_realtime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str minx: Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
        :param str maxx: Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
        :param str miny: Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
        :param str maxy: Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
        :param str only_realtime: Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
        :return: LiveMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.livemap_with_http_info(minx, maxx, miny, maxy, only_realtime, **kwargs)
        else:
            (data) = self.livemap_with_http_info(minx, maxx, miny, maxy, only_realtime, **kwargs)
            return data

    def livemap_with_http_info(self, minx, maxx, miny, maxy, only_realtime, **kwargs):
        """
        Returns the positions of all vehicles in a given bounding box
        This method will return the positions of all vehicles in a given bounding box.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.livemap_with_http_info(minx, maxx, miny, maxy, only_realtime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str minx: Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
        :param str maxx: Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
        :param str miny: Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
        :param str maxy: Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
        :param str only_realtime: Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
        :return: LiveMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['minx', 'maxx', 'miny', 'maxy', 'only_realtime']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method livemap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'minx' is set
        if ('minx' not in params) or (params['minx'] is None):
            raise ValueError("Missing the required parameter `minx` when calling `livemap`")
        # verify the required parameter 'maxx' is set
        if ('maxx' not in params) or (params['maxx'] is None):
            raise ValueError("Missing the required parameter `maxx` when calling `livemap`")
        # verify the required parameter 'miny' is set
        if ('miny' not in params) or (params['miny'] is None):
            raise ValueError("Missing the required parameter `miny` when calling `livemap`")
        # verify the required parameter 'maxy' is set
        if ('maxy' not in params) or (params['maxy'] is None):
            raise ValueError("Missing the required parameter `maxy` when calling `livemap`")
        # verify the required parameter 'only_realtime' is set
        if ('only_realtime' not in params) or (params['only_realtime'] is None):
            raise ValueError("Missing the required parameter `only_realtime` when calling `livemap`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'minx' in params:
            query_params.append(('minx', params['minx']))
        if 'maxx' in params:
            query_params.append(('maxx', params['maxx']))
        if 'miny' in params:
            query_params.append(('miny', params['miny']))
        if 'maxy' in params:
            query_params.append(('maxy', params['maxy']))
        if 'only_realtime' in params:
            query_params.append(('onlyRealtime', params['only_realtime']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/livemap', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LiveMap',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
