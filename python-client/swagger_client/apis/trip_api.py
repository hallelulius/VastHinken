# coding: utf-8

"""
    Reseplaneraren

    Provides access to Västtrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TripApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_trip(self, **kwargs):
        """
        Calculates a trip from a specified origin to a specified destination.
        Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_trip(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int origin_id: origin stop id
        :param float origin_coord_lat: origin latitude of center coordinate in the WGS84 system
        :param float origin_coord_long: origin longitude of center coordinate in the WGS84 system
        :param str origin_coord_name: name of the address at the specified origin coordinate
        :param int dest_id: destination stop id
        :param float dest_coord_lat: destination latitude of center coordinate in the WGS84 system
        :param float dest_coord_long: destination longitude of center coordinate in the WGS84 system
        :param str dest_coord_name: name of the address at the specified destination coordinate
        :param int via_id: via stop/station id
        :param date date: date of the trip
        :param str time: time of the trip in format HH:MM
        :param str search_for_arrival: to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.
        :param str use_vas: to exclude trips with Västtågen, set this parameter to 0.
        :param str use_ld_train: to exclude trips with long distance trains, set this parameter to 0.
        :param str use_reg_train: to exclude trips with regional trains, set this parameter to 0.
        :param str use_bus: to exclude trips with buses, set this parameter to 0.
        :param str use_medical: to include medical transport lines trips with buses, set this parameter to 1.
        :param str origin_medical_con: to search for medical transport connections from the origin, set this parameter to 1.
        :param str dest_medical_con: to search for medical transport connections from the destination, set this parameter to 1.
        :param str wheel_chair_space: to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.
        :param str stroller_space: to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.
        :param str low_floor: to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.
        :param str ramp_or_lift: to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.
        :param str use_boat: to exclude trips with boats, set this parameter to 0.
        :param str use_tram: to exclude trips with trams, set this parameter to 0.
        :param str use_pt: to exclude trips with public transportation, set this parameter to 0.
        :param str exclude_dr: to exclude journeys which require tel. registration, set this parameter to 1.
        :param int max_walk_dist: maximum walking distance from/to the coordinate in meters
        :param str walk_speed: walking speed given in percent of normal speed
        :param str origin_walk: to exclude trips with walks from/to coordinates, set this to 0
        :param str dest_walk: to exclude trips with walks from/to coordinates, set this to 0
        :param str only_walk: to search for walk-only trips, set this to 1
        :param str origin_bike: to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.
        :param int max_bike_dist: maximum biking distance from/to the coordinate in meters
        :param str bike_criterion: optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where 'F' is used to indicate tha fastest route with mimimized travel time, and 'D' is used to indicate dedicated bike roads to maximize use of bike roads.
        :param str bike_profile: determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where 'E' is used to indicate easy with minimized steepnes, 'N' is used to indicate normal, and 'P' is used to indicate powerful to allow more steepness.
        :param str only_bike: to search for bike-only trips, set this to 1
        :param str origin_car: to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.
        :param str origin_car_with_parking: to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.
        :param int max_car_dist: maximum car distance from/to the coordinate in meters
        :param str only_car: to search for car-only trips, set this to 1
        :param int max_changes: maximum number of changes in the trip
        :param int additional_change_time: to prolong the minimal change times in minutes between the public transport legs of the returned journeys
        :param str disregard_default_change_margin: to ignore the default change margin, set this to 1
        :param str need_journey_detail: if the reference URL for the journey detail service is not needed in the re, set this to 0
        :param str need_geo: if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1
        :param str need_itinerary: if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1
        :param int num_trips: the number of trips in the returned result
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: TripList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_trip_with_http_info(**kwargs)
        else:
            (data) = self.get_trip_with_http_info(**kwargs)
            return data

    def get_trip_with_http_info(self, **kwargs):
        """
        Calculates a trip from a specified origin to a specified destination.
        Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_trip_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int origin_id: origin stop id
        :param float origin_coord_lat: origin latitude of center coordinate in the WGS84 system
        :param float origin_coord_long: origin longitude of center coordinate in the WGS84 system
        :param str origin_coord_name: name of the address at the specified origin coordinate
        :param int dest_id: destination stop id
        :param float dest_coord_lat: destination latitude of center coordinate in the WGS84 system
        :param float dest_coord_long: destination longitude of center coordinate in the WGS84 system
        :param str dest_coord_name: name of the address at the specified destination coordinate
        :param int via_id: via stop/station id
        :param date date: date of the trip
        :param str time: time of the trip in format HH:MM
        :param str search_for_arrival: to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.
        :param str use_vas: to exclude trips with Västtågen, set this parameter to 0.
        :param str use_ld_train: to exclude trips with long distance trains, set this parameter to 0.
        :param str use_reg_train: to exclude trips with regional trains, set this parameter to 0.
        :param str use_bus: to exclude trips with buses, set this parameter to 0.
        :param str use_medical: to include medical transport lines trips with buses, set this parameter to 1.
        :param str origin_medical_con: to search for medical transport connections from the origin, set this parameter to 1.
        :param str dest_medical_con: to search for medical transport connections from the destination, set this parameter to 1.
        :param str wheel_chair_space: to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.
        :param str stroller_space: to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.
        :param str low_floor: to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.
        :param str ramp_or_lift: to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.
        :param str use_boat: to exclude trips with boats, set this parameter to 0.
        :param str use_tram: to exclude trips with trams, set this parameter to 0.
        :param str use_pt: to exclude trips with public transportation, set this parameter to 0.
        :param str exclude_dr: to exclude journeys which require tel. registration, set this parameter to 1.
        :param int max_walk_dist: maximum walking distance from/to the coordinate in meters
        :param str walk_speed: walking speed given in percent of normal speed
        :param str origin_walk: to exclude trips with walks from/to coordinates, set this to 0
        :param str dest_walk: to exclude trips with walks from/to coordinates, set this to 0
        :param str only_walk: to search for walk-only trips, set this to 1
        :param str origin_bike: to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.
        :param int max_bike_dist: maximum biking distance from/to the coordinate in meters
        :param str bike_criterion: optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where 'F' is used to indicate tha fastest route with mimimized travel time, and 'D' is used to indicate dedicated bike roads to maximize use of bike roads.
        :param str bike_profile: determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where 'E' is used to indicate easy with minimized steepnes, 'N' is used to indicate normal, and 'P' is used to indicate powerful to allow more steepness.
        :param str only_bike: to search for bike-only trips, set this to 1
        :param str origin_car: to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.
        :param str origin_car_with_parking: to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.
        :param int max_car_dist: maximum car distance from/to the coordinate in meters
        :param str only_car: to search for car-only trips, set this to 1
        :param int max_changes: maximum number of changes in the trip
        :param int additional_change_time: to prolong the minimal change times in minutes between the public transport legs of the returned journeys
        :param str disregard_default_change_margin: to ignore the default change margin, set this to 1
        :param str need_journey_detail: if the reference URL for the journey detail service is not needed in the re, set this to 0
        :param str need_geo: if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1
        :param str need_itinerary: if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1
        :param int num_trips: the number of trips in the returned result
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: TripList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origin_id', 'origin_coord_lat', 'origin_coord_long', 'origin_coord_name', 'dest_id', 'dest_coord_lat', 'dest_coord_long', 'dest_coord_name', 'via_id', 'date', 'time', 'search_for_arrival', 'use_vas', 'use_ld_train', 'use_reg_train', 'use_bus', 'use_medical', 'origin_medical_con', 'dest_medical_con', 'wheel_chair_space', 'stroller_space', 'low_floor', 'ramp_or_lift', 'use_boat', 'use_tram', 'use_pt', 'exclude_dr', 'max_walk_dist', 'walk_speed', 'origin_walk', 'dest_walk', 'only_walk', 'origin_bike', 'max_bike_dist', 'bike_criterion', 'bike_profile', 'only_bike', 'origin_car', 'origin_car_with_parking', 'max_car_dist', 'only_car', 'max_changes', 'additional_change_time', 'disregard_default_change_margin', 'need_journey_detail', 'need_geo', 'need_itinerary', 'num_trips', 'format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trip" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'origin_id' in params:
            query_params.append(('originId', params['origin_id']))
        if 'origin_coord_lat' in params:
            query_params.append(('originCoordLat', params['origin_coord_lat']))
        if 'origin_coord_long' in params:
            query_params.append(('originCoordLong', params['origin_coord_long']))
        if 'origin_coord_name' in params:
            query_params.append(('originCoordName', params['origin_coord_name']))
        if 'dest_id' in params:
            query_params.append(('destId', params['dest_id']))
        if 'dest_coord_lat' in params:
            query_params.append(('destCoordLat', params['dest_coord_lat']))
        if 'dest_coord_long' in params:
            query_params.append(('destCoordLong', params['dest_coord_long']))
        if 'dest_coord_name' in params:
            query_params.append(('destCoordName', params['dest_coord_name']))
        if 'via_id' in params:
            query_params.append(('viaId', params['via_id']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'time' in params:
            query_params.append(('time', params['time']))
        if 'search_for_arrival' in params:
            query_params.append(('searchForArrival', params['search_for_arrival']))
        if 'use_vas' in params:
            query_params.append(('useVas', params['use_vas']))
        if 'use_ld_train' in params:
            query_params.append(('useLDTrain', params['use_ld_train']))
        if 'use_reg_train' in params:
            query_params.append(('useRegTrain', params['use_reg_train']))
        if 'use_bus' in params:
            query_params.append(('useBus', params['use_bus']))
        if 'use_medical' in params:
            query_params.append(('useMedical', params['use_medical']))
        if 'origin_medical_con' in params:
            query_params.append(('originMedicalCon', params['origin_medical_con']))
        if 'dest_medical_con' in params:
            query_params.append(('destMedicalCon', params['dest_medical_con']))
        if 'wheel_chair_space' in params:
            query_params.append(('wheelChairSpace', params['wheel_chair_space']))
        if 'stroller_space' in params:
            query_params.append(('strollerSpace', params['stroller_space']))
        if 'low_floor' in params:
            query_params.append(('lowFloor', params['low_floor']))
        if 'ramp_or_lift' in params:
            query_params.append(('rampOrLift', params['ramp_or_lift']))
        if 'use_boat' in params:
            query_params.append(('useBoat', params['use_boat']))
        if 'use_tram' in params:
            query_params.append(('useTram', params['use_tram']))
        if 'use_pt' in params:
            query_params.append(('usePT', params['use_pt']))
        if 'exclude_dr' in params:
            query_params.append(('excludeDR', params['exclude_dr']))
        if 'max_walk_dist' in params:
            query_params.append(('maxWalkDist', params['max_walk_dist']))
        if 'walk_speed' in params:
            query_params.append(('walkSpeed', params['walk_speed']))
        if 'origin_walk' in params:
            query_params.append(('originWalk', params['origin_walk']))
        if 'dest_walk' in params:
            query_params.append(('destWalk', params['dest_walk']))
        if 'only_walk' in params:
            query_params.append(('onlyWalk', params['only_walk']))
        if 'origin_bike' in params:
            query_params.append(('originBike', params['origin_bike']))
        if 'max_bike_dist' in params:
            query_params.append(('maxBikeDist', params['max_bike_dist']))
        if 'bike_criterion' in params:
            query_params.append(('bikeCriterion', params['bike_criterion']))
        if 'bike_profile' in params:
            query_params.append(('bikeProfile', params['bike_profile']))
        if 'only_bike' in params:
            query_params.append(('onlyBike', params['only_bike']))
        if 'origin_car' in params:
            query_params.append(('originCar', params['origin_car']))
        if 'origin_car_with_parking' in params:
            query_params.append(('originCarWithParking', params['origin_car_with_parking']))
        if 'max_car_dist' in params:
            query_params.append(('maxCarDist', params['max_car_dist']))
        if 'only_car' in params:
            query_params.append(('onlyCar', params['only_car']))
        if 'max_changes' in params:
            query_params.append(('maxChanges', params['max_changes']))
        if 'additional_change_time' in params:
            query_params.append(('additionalChangeTime', params['additional_change_time']))
        if 'disregard_default_change_margin' in params:
            query_params.append(('disregardDefaultChangeMargin', params['disregard_default_change_margin']))
        if 'need_journey_detail' in params:
            query_params.append(('needJourneyDetail', params['need_journey_detail']))
        if 'need_geo' in params:
            query_params.append(('needGeo', params['need_geo']))
        if 'need_itinerary' in params:
            query_params.append(('needItinerary', params['need_itinerary']))
        if 'num_trips' in params:
            query_params.append(('numTrips', params['num_trips']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/trip', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TripList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
