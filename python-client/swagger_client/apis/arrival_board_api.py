# coding: utf-8

"""
    Reseplaneraren

    Provides access to Västtrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ArrivalBoardApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_arrival_board(self, id, date, time, direction, **kwargs):
        """
        Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
        This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_arrival_board(id, date, time, direction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: stop id (required)
        :param date date: the date (required)
        :param str time: the time in format HH:MM (required)
        :param int direction: stop id in order to get only departures of vehicles with a specified direction (required)
        :param str use_vas: to exclude trips with Västtågen, set this parameter to 0.
        :param str use_ld_train: to exclude trips with long distance trains, set this parameter to 0.
        :param str use_reg_train: to exclude trips with regional trains, set this parameter to 0.
        :param str use_bus: to exclude trips with buses, set this parameter to 0.
        :param str use_boat: to exclude trips with boats, set this parameter to 0.
        :param str use_tram: to exclude trips with trams, set this parameter to 0.
        :param str exclude_dr: to exclude journeys which require tel. registration, set this parameter to 0.
        :param int time_span: to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.
        :param int max_departures_per_line: if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.
        :param str need_journey_detail: if the reference URL for the journey detail service is not needed in the result, set this parameter to 0
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: ArrivalBoard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_arrival_board_with_http_info(id, date, time, direction, **kwargs)
        else:
            (data) = self.get_arrival_board_with_http_info(id, date, time, direction, **kwargs)
            return data

    def get_arrival_board_with_http_info(self, id, date, time, direction, **kwargs):
        """
        Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
        This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_arrival_board_with_http_info(id, date, time, direction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: stop id (required)
        :param date date: the date (required)
        :param str time: the time in format HH:MM (required)
        :param int direction: stop id in order to get only departures of vehicles with a specified direction (required)
        :param str use_vas: to exclude trips with Västtågen, set this parameter to 0.
        :param str use_ld_train: to exclude trips with long distance trains, set this parameter to 0.
        :param str use_reg_train: to exclude trips with regional trains, set this parameter to 0.
        :param str use_bus: to exclude trips with buses, set this parameter to 0.
        :param str use_boat: to exclude trips with boats, set this parameter to 0.
        :param str use_tram: to exclude trips with trams, set this parameter to 0.
        :param str exclude_dr: to exclude journeys which require tel. registration, set this parameter to 0.
        :param int time_span: to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.
        :param int max_departures_per_line: if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.
        :param str need_journey_detail: if the reference URL for the journey detail service is not needed in the result, set this parameter to 0
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: ArrivalBoard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'date', 'time', 'direction', 'use_vas', 'use_ld_train', 'use_reg_train', 'use_bus', 'use_boat', 'use_tram', 'exclude_dr', 'time_span', 'max_departures_per_line', 'need_journey_detail', 'format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_arrival_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_arrival_board`")
        # verify the required parameter 'date' is set
        if ('date' not in params) or (params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `get_arrival_board`")
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `get_arrival_board`")
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `get_arrival_board`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))
        if 'date' in params:
            query_params.append(('date', params['date']))
        if 'time' in params:
            query_params.append(('time', params['time']))
        if 'use_vas' in params:
            query_params.append(('useVas', params['use_vas']))
        if 'use_ld_train' in params:
            query_params.append(('useLDTrain', params['use_ld_train']))
        if 'use_reg_train' in params:
            query_params.append(('useRegTrain', params['use_reg_train']))
        if 'use_bus' in params:
            query_params.append(('useBus', params['use_bus']))
        if 'use_boat' in params:
            query_params.append(('useBoat', params['use_boat']))
        if 'use_tram' in params:
            query_params.append(('useTram', params['use_tram']))
        if 'exclude_dr' in params:
            query_params.append(('excludeDR', params['exclude_dr']))
        if 'time_span' in params:
            query_params.append(('timeSpan', params['time_span']))
        if 'max_departures_per_line' in params:
            query_params.append(('maxDeparturesPerLine', params['max_departures_per_line']))
        if 'need_journey_detail' in params:
            query_params.append(('needJourneyDetail', params['need_journey_detail']))
        if 'direction' in params:
            query_params.append(('direction', params['direction']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/arrivalBoard', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArrivalBoard',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
