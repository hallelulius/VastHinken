# coding: utf-8

"""
    Reseplaneraren

    Provides access to VÃ¤sttrafik journey planner

    OpenAPI spec version: 1.10.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LocationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_all_stops(self, **kwargs):
        """
        Returns a list of all stops available in the journey planner.
        Returns a list of all stops available in the journey planner. Be aware that a call of this service is very time consuming and should be only requested when it is really needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_stops(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_stops_with_http_info(**kwargs)
        else:
            (data) = self.get_all_stops_with_http_info(**kwargs)
            return data

    def get_all_stops_with_http_info(self, **kwargs):
        """
        Returns a list of all stops available in the journey planner.
        Returns a list of all stops available in the journey planner. Be aware that a call of this service is very time consuming and should be only requested when it is really needed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_stops_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_stops" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/location.allstops', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_location_by_name(self, **kwargs):
        """
        Returns a list of possible matches in the journey planner database
        Performs a pattern matching of a user input to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_location_by_name(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str input: a string with the user input
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_location_by_name_with_http_info(**kwargs)
        else:
            (data) = self.get_location_by_name_with_http_info(**kwargs)
            return data

    def get_location_by_name_with_http_info(self, **kwargs):
        """
        Returns a list of possible matches in the journey planner database
        Performs a pattern matching of a user input to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_location_by_name_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str input: a string with the user input
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input', 'format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_location_by_name" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'input' in params:
            query_params.append(('input', params['input']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/location.name', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_nearby_address(self, origin_coord_lat, origin_coord_long, **kwargs):
        """
        Returns the address nearest a given coordinate.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nearby_address(origin_coord_lat, origin_coord_long, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float origin_coord_lat: latitude of coordinate in the WGS84 system (required)
        :param float origin_coord_long: longitude of coordinate in the WGS84 system (required)
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_nearby_address_with_http_info(origin_coord_lat, origin_coord_long, **kwargs)
        else:
            (data) = self.get_nearby_address_with_http_info(origin_coord_lat, origin_coord_long, **kwargs)
            return data

    def get_nearby_address_with_http_info(self, origin_coord_lat, origin_coord_long, **kwargs):
        """
        Returns the address nearest a given coordinate.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nearby_address_with_http_info(origin_coord_lat, origin_coord_long, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float origin_coord_lat: latitude of coordinate in the WGS84 system (required)
        :param float origin_coord_long: longitude of coordinate in the WGS84 system (required)
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origin_coord_lat', 'origin_coord_long', 'format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nearby_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'origin_coord_lat' is set
        if ('origin_coord_lat' not in params) or (params['origin_coord_lat'] is None):
            raise ValueError("Missing the required parameter `origin_coord_lat` when calling `get_nearby_address`")
        # verify the required parameter 'origin_coord_long' is set
        if ('origin_coord_long' not in params) or (params['origin_coord_long'] is None):
            raise ValueError("Missing the required parameter `origin_coord_long` when calling `get_nearby_address`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'origin_coord_lat' in params:
            query_params.append(('originCoordLat', params['origin_coord_lat']))
        if 'origin_coord_long' in params:
            query_params.append(('originCoordLong', params['origin_coord_long']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/location.nearbyaddress', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_nearby_stops(self, origin_coord_lat, origin_coord_long, **kwargs):
        """
        Returns a list of stops around a given center coordinate.
        Returns a list of stops around a given center coordinate. The returned results are ordered by their distance to the center coordinate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nearby_stops(origin_coord_lat, origin_coord_long, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float origin_coord_lat: latitude of center coordinate in the WGS84 system (required)
        :param float origin_coord_long: longitude of center coordinate in the WGS84 system (required)
        :param int max_no: maximum number of returned stops
        :param int max_dist: maximum distance from the center coordinate
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_nearby_stops_with_http_info(origin_coord_lat, origin_coord_long, **kwargs)
        else:
            (data) = self.get_nearby_stops_with_http_info(origin_coord_lat, origin_coord_long, **kwargs)
            return data

    def get_nearby_stops_with_http_info(self, origin_coord_lat, origin_coord_long, **kwargs):
        """
        Returns a list of stops around a given center coordinate.
        Returns a list of stops around a given center coordinate. The returned results are ordered by their distance to the center coordinate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nearby_stops_with_http_info(origin_coord_lat, origin_coord_long, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float origin_coord_lat: latitude of center coordinate in the WGS84 system (required)
        :param float origin_coord_long: longitude of center coordinate in the WGS84 system (required)
        :param int max_no: maximum number of returned stops
        :param int max_dist: maximum distance from the center coordinate
        :param str format: the required response format
        :param str jsonp_callback: If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
        :return: LocationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origin_coord_lat', 'origin_coord_long', 'max_no', 'max_dist', 'format', 'jsonp_callback']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nearby_stops" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'origin_coord_lat' is set
        if ('origin_coord_lat' not in params) or (params['origin_coord_lat'] is None):
            raise ValueError("Missing the required parameter `origin_coord_lat` when calling `get_nearby_stops`")
        # verify the required parameter 'origin_coord_long' is set
        if ('origin_coord_long' not in params) or (params['origin_coord_long'] is None):
            raise ValueError("Missing the required parameter `origin_coord_long` when calling `get_nearby_stops`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'origin_coord_lat' in params:
            query_params.append(('originCoordLat', params['origin_coord_lat']))
        if 'origin_coord_long' in params:
            query_params.append(('originCoordLong', params['origin_coord_long']))
        if 'max_no' in params:
            query_params.append(('maxNo', params['max_no']))
        if 'max_dist' in params:
            query_params.append(('maxDist', params['max_dist']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'jsonp_callback' in params:
            query_params.append(('jsonpCallback', params['jsonp_callback']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/location.nearbystops', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LocationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
